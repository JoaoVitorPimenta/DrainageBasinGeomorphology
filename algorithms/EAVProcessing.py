# -*- coding: utf-8 -*-

'''
/***************************************************************************
 DrainageBasinGeomorphology
                                 A QGIS plugin
 This plugin provides tools for geomorphological analysis in drainage basins.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-22
        copyright            : (C) 2025 by João Vitor Pimenta
        email                : jvpjoaopimenta@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
'''

__author__ = 'João Vitor Pimenta'
__date__ = '2025-03-22'
__copyright__ = '(C) 2025 by João Vitor Pimenta'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsPointXY, QgsProcessingException
from collections import Counter
import numpy as np
import csv
import itertools

def verifyLibs():
        try:
            import numpy
        except ImportError:
            raise QgsProcessingException('Numpy library not found, please install it and try again.')

def EAVprocessing(demLayer,basin,feedback):
    basinGeom = basin.geometry()

    extent = demLayer.extent()

    pixelWidth = demLayer.rasterUnitsPerPixelX()
    pixelHeight = demLayer.rasterUnitsPerPixelY()

    array = demLayer.as_numpy(use_masking=True,bands=[0])
    validDataInsideBasin = []

    for row in range(demLayer.height()):
        for col in range(demLayer.width()):
            x = extent.xMinimum() + col * pixelWidth + pixelWidth/2
            y = extent.yMaximum() - row * pixelHeight - pixelHeight/2
            point = QgsPointXY(x,y)
            
            
            if basinGeom.contains(point):
                value = array[0,row,col]
                validDataInsideBasin.append(value)

    if not validDataInsideBasin:
        feedback.pushWarning('There is no valid raster data in the basin of id '+str(basin.id())+' and some calculations may be compromised')

    counterValues = Counter(validDataInsideBasin)
    counterValuesOrdered = sorted(counterValues.items())

    elevations = [item[0] for item in counterValuesOrdered]
    countElevations = [item[1] for item in counterValuesOrdered]

    areas = np.array(countElevations) * (pixelWidth * pixelHeight)
    cumulativeAreas = np.cumsum(areas)
    cumulativeAreasList = cumulativeAreas.tolist()

    deltaElev = np.diff(elevations)
    volumes = cumulativeAreas[1:] * deltaElev
    cumulativeVolumes = np.concatenate(([0], np.cumsum(volumes)))
    cumulativeVolumesList = cumulativeVolumes.tolist()
    return elevations, cumulativeAreasList, cumulativeVolumesList

def calculateEAV(drainageBasinLayer,demLayer,path,feedback):
    verifyLibs()

    feedback.setProgress(0)
    total = drainageBasinLayer.featureCount() + 1
    step = 100.0 / total if total else 0

    listsWithData = []

    for idx, basin in enumerate(drainageBasinLayer.getFeatures()):
        if feedback.isCanceled():
            return
        elevations, cumulativeAreas, cumulativeVolumes = EAVprocessing(demLayer,basin,feedback)

        elevations.insert(0,'Elevation basin '+str(basin.id()))
        cumulativeAreas.insert(0,'Area basin '+str(basin.id()))
        cumulativeVolumes.insert(0,'Volume basin '+str(basin.id()))

        listsWithData.append(elevations)
        listsWithData.append(cumulativeAreas)
        listsWithData.append(cumulativeVolumes)

        barProgress = int((idx + 1) * step)
        feedback.setProgress(barProgress)
        feedback.setProgressText('Basin '+str(basin.id())+' processing completed')

    if feedback.isCanceled():
            return
    with open(path, 'w', newline='') as arquivo:
        writer = csv.writer(arquivo)
        writer.writerows(itertools.zip_longest(*listsWithData))

    feedback.setProgress(100)
